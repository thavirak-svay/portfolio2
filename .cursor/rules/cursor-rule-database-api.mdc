---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules: Database & API Guidelines (cursor-rule-database-api.mdc)

## Preamble: Guiding Philosophy
This file is part of the **Cursor Rules** modular system, derived from the MASTER SYSTEM PROMPT for AI Coding Agents. It defines **DATABASE AND API DESIGN GUIDELINES** for robust backend systems. Adherence to these rules is **NON-NEGOTIABLE** for producing secure and scalable solutions. Internalize and apply these directives in all database and API-related tasks.

## Section 1: Database Design & Management

### 1.1 Schema Design
- **NORMALIZATION (MANDATORY)**: Design schemas with appropriate normalization (usually 3NF) to avoid redundancy, unless denormalization is justified for performance.
- **INDEXING**: Create indexes on frequently queried fields (e.g., primary keys, foreign keys, search fields). Avoid over-indexing to prevent write performance issues.
- **NAMING**: Use clear, consistent naming (e.g., `user_profiles` for tables, `user_id` for columns).

### 1.2 Data Integrity
- **CONSTRAINTS (MANDATORY)**: Enforce data integrity with primary keys, foreign keys, unique constraints, and check constraints where supported.
- **NULL HANDLING**: Minimize use of `NULL` by defining default values where possible. Document `NULL` meanings explicitly.

### 1.3 ORM & Query Optimization
- **ORM USAGE**: Use ORMs (e.g., SQLAlchemy, Django ORM) for standard CRUD operations. Write raw SQL for complex queries or performance-critical operations.
- **QUERY EFFICIENCY**: Avoid N+1 query problems. Use eager loading or batch queries as appropriate.

### 1.4 Migrations
- **MIGRATION TOOLS (MANDATORY)**: Use migration tools (e.g., Alembic for SQLAlchemy, Django migrations) to manage schema changes. Ensure migrations are version-controlled.

## Section 2: API Design & Implementation

### 2.1 RESTful Principles
- **ENDPOINT DESIGN (MANDATORY)**: Follow REST conventions (e.g., `GET /users`, `POST /users`, `PUT /users/{id}`).
- **STATUS CODES**: Use appropriate HTTP status codes (e.g., `200 OK`, `201 Created`, `400 Bad Request`, `401 Unauthorized`).

### 2.2 Authentication & Authorization
- **SECURITY (MANDATORY)**: Implement secure authentication (e.g., OAuth 2.0, JWT). Use role-based access control (RBAC) or attribute-based access control (ABAC) for authorization.
- **TOKEN HANDLING**: Securely handle tokens (e.g., short-lived access tokens, secure refresh tokens).

### 2.3 Error Responses
- **STANDARDIZATION (MANDATORY)**: Return structured error responses with codes and messages.
  - Example:
    ```
    {
      "error": {
        "code": "INVALID_INPUT",
        "message": "User ID must be a positive integer."
      }
    }
    ```

### 2.4 Rate Limiting & Resilience
- **PROTECTION**: Implement rate limiting to prevent abuse (e.g., using middleware like `express-rate-limit`).
- **RESILIENCE**: Use circuit breakers and retries for external API calls (e.g., `Polly` in .NET, `resilience4j` in Java).
